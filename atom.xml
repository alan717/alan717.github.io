<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>阿凯的博客</title><link href="alan717.github.io/" rel="alternate"></link><link href="alan717.github.io/atom.xml" rel="self"></link><id>alan717.github.io/</id><updated>2024-03-04T00:00:00+08:00</updated><subtitle>LK's blog</subtitle><entry><title>多peer组网-wireguard使用</title><link href="alan717.github.io/wireguard_cfg.html" rel="alternate"></link><published>2024-03-04T00:00:00+08:00</published><updated>2024-03-04T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-03-04:alan717.github.io/wireguard_cfg.html</id><summary type="html">使用wireguard连接家庭内网</summary><content type="html">&lt;h2&gt;简要&lt;/h2&gt;
&lt;p&gt;wireguard简单理解就是非对称加密的peer-2-peer连接，所以配置依赖公私钥.&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;使用wireguard生成公私钥.&lt;/p&gt;
&lt;h3&gt;生成密钥对&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;wg genkey | sudo tee /etc/wireguard/src_private.key&lt;/code&gt; &lt;br&gt;
&lt;code&gt;sudo cat /etc/wireguard/src_private.key | wg pubkey | sudo tee /etc/wireguard/srv_public.key&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;服务器端配置&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/etc/wireguard/wg0.conf
&lt;span class="o"&gt;[&lt;/span&gt;Interface&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;PrivateKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;src_private.key&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;Address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.8.0.1/24,&lt;span class="w"&gt; &lt;/span&gt;fd0d:86fa:c3bc::1/64
&lt;span class="nv"&gt;ListenPort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;51820&lt;/span&gt;
&lt;span class="nv"&gt;SaveConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;

&lt;span class="nv"&gt;PostUp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ufw&lt;span class="w"&gt; &lt;/span&gt;route&lt;span class="w"&gt; &lt;/span&gt;allow&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;wg0&lt;span class="w"&gt; &lt;/span&gt;out&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;eth0
&lt;span class="nv"&gt;PostUp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;iptables&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;nat&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;POSTROUTING&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;MASQUERADE
&lt;span class="nv"&gt;PostUp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ip6tables&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;nat&lt;span class="w"&gt; &lt;/span&gt;-I&lt;span class="w"&gt; &lt;/span&gt;POSTROUTING&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;MASQUERADE
&lt;span class="nv"&gt;PreDown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ufw&lt;span class="w"&gt; &lt;/span&gt;route&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;allow&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;wg0&lt;span class="w"&gt; &lt;/span&gt;out&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;eth0
&lt;span class="nv"&gt;PreDown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;iptables&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;nat&lt;span class="w"&gt; &lt;/span&gt;-D&lt;span class="w"&gt; &lt;/span&gt;POSTROUTING&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;MASQUERADE
&lt;span class="nv"&gt;PreDown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ip6tables&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;nat&lt;span class="w"&gt; &lt;/span&gt;-D&lt;span class="w"&gt; &lt;/span&gt;POSTROUTING&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;-j&lt;span class="w"&gt; &lt;/span&gt;MASQUERADE

&lt;span class="o"&gt;[&lt;/span&gt;Peer&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# client 1&lt;/span&gt;
&lt;span class="nv"&gt;PublicKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;client1_pub.key&lt;span class="s1"&gt;&amp;#39;s content&lt;/span&gt;
&lt;span class="s1"&gt;AllowedIPs = 10.8.0.2/32, fd0d:86fa:c3bc::/64&lt;/span&gt;
&lt;span class="s1"&gt;Endpoint = 203.0.113.1:51820&lt;/span&gt;
&lt;span class="s1"&gt;[Peer] # client 2&lt;/span&gt;
&lt;span class="s1"&gt;PublicKey = client2_pub.key&amp;#39;&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;content
&lt;span class="nv"&gt;AllowedIPs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.8.0.3/32,&lt;span class="w"&gt; &lt;/span&gt;fd0d:86fa:c3bc::/64
&lt;span class="nv"&gt;Endpoint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;203&lt;/span&gt;.0.113.1:51820
&lt;span class="o"&gt;[&lt;/span&gt;Peer&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# client 3 &lt;/span&gt;
&lt;span class="nv"&gt;PublicKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;client3_pub.key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;content
&lt;span class="nv"&gt;AllowedIPs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.8.0.4/32,&lt;span class="w"&gt; &lt;/span&gt;fd0d:86fa:c3bc::/64
&lt;span class="nv"&gt;Endpoint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;203&lt;/span&gt;.0.113.1:51820
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;系统配置：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;nano&lt;span class="w"&gt; &lt;/span&gt;/etc/sysctl.conf
net.ipv4.ip_forward&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
net.ipv6.conf.all.forwarding&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动：&lt;br&gt;
&lt;code&gt;wg-quick up wg0&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;停止：&lt;br&gt;
&lt;code&gt;wg-quick down wg0&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;peer配置&lt;/h3&gt;
&lt;h4&gt;key-pair&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;wg genkey | sudo tee /etc/wireguard/cli_private.key&lt;/code&gt;
&lt;code&gt;sudo cat /etc/wireguard/cli_private.key | wg pubkey | sudo tee /etc/wireguard/cli_public.key&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;wg配置&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;nano&lt;span class="w"&gt; &lt;/span&gt;/etc/wireguard/wg0.conf
/etc/wireguard/wg0.conf
&lt;span class="o"&gt;[&lt;/span&gt;Interface&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;PrivateKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;client1&lt;span class="s1"&gt;&amp;#39;s private key.&lt;/span&gt;
&lt;span class="s1"&gt;Address = 10.8.0.2/24&lt;/span&gt;
&lt;span class="s1"&gt;Address = fd0d:86fa:c3bc::2/64&lt;/span&gt;
&lt;span class="s1"&gt;MTU = 1280&lt;/span&gt;

&lt;span class="s1"&gt;[Peer]&lt;/span&gt;
&lt;span class="s1"&gt;PublicKey = srv&amp;#39;&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;public&lt;span class="w"&gt; &lt;/span&gt;key.
&lt;span class="nv"&gt;AllowedIPs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.8.0.0/24,&lt;span class="w"&gt; &lt;/span&gt;fd0d:86fa:c3bc::/64
&lt;span class="nv"&gt;Endpoint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;203&lt;/span&gt;.0.113.1:51820
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;启动和暂停和服务器一样。&lt;/p&gt;
&lt;h3&gt;第二个peer配置&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;nano&lt;span class="w"&gt; &lt;/span&gt;/etc/wireguard/wg0.conf
/etc/wireguard/wg0.conf
&lt;span class="o"&gt;[&lt;/span&gt;Interface&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;PrivateKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;client2&lt;span class="s1"&gt;&amp;#39;s private key.&lt;/span&gt;
&lt;span class="s1"&gt;Address = 10.8.0.3/24&lt;/span&gt;
&lt;span class="s1"&gt;Address = fd0d:86fa:c3bc::2/64&lt;/span&gt;
&lt;span class="s1"&gt;MTU = 1280&lt;/span&gt;


&lt;span class="s1"&gt;[Peer]&lt;/span&gt;
&lt;span class="s1"&gt;PublicKey = srv&amp;#39;&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;public&lt;span class="w"&gt; &lt;/span&gt;key.
&lt;span class="nv"&gt;AllowedIPs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.8.0.0/24,&lt;span class="w"&gt; &lt;/span&gt;fd0d:86fa:c3bc::/64
&lt;span class="nv"&gt;Endpoint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;203&lt;/span&gt;.0.113.1:51820
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;第三个peer配置第四个etc....&lt;/h3&gt;
&lt;p&gt;这个配置和上边的Peer一样，需要修改的是Peer的私钥和IP.还有服务器端Peer的allowedIPs和Peer的公钥.&lt;/p&gt;
&lt;h2&gt;troubleshooting&lt;/h2&gt;
&lt;h3&gt;stuck on some command&lt;/h3&gt;
&lt;p&gt;设置MTU降低.就好了&lt;/p&gt;
&lt;h3&gt;allowedips is none&lt;/h3&gt;
&lt;p&gt;设置allowedips时候，使用的那个ip的流量和网段prefix，直接使用peer&amp;rsquo;s ip/32即可接受这个ip的所有流量.&lt;/p&gt;</content></entry><entry><title>记无源码给闭源内核写模块</title><link href="alan717.github.io/mod_problem.html" rel="alternate"></link><published>2024-03-01T00:00:00+08:00</published><updated>2024-03-01T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-03-01:alan717.github.io/mod_problem.html</id><summary type="html">给一个产品的linux写内核模块</summary><content type="html">&lt;h2&gt;pre&lt;/h2&gt;
&lt;p&gt;目标主机没有内核源码，只确定内核大概版本，确定是它修改了内核，和引入了xenomai实时内核.&lt;/p&gt;
&lt;h2&gt;模块编写&lt;/h2&gt;
&lt;p&gt;开发很顺利，正向开发就可以&lt;/p&gt;
&lt;h2&gt;问题&lt;/h2&gt;
&lt;h3&gt;1.disagrees about version of symbol module_layout&lt;/h3&gt;
&lt;p&gt;这个内核版本驱动版本号和自己开发的&lt;code&gt;module_layout&lt;/code&gt;版本号不一样导致的，解决办法有2:
* 找一个内核能加载的内核ko文件，找到&lt;code&gt;____versions&lt;/code&gt;的section ,第一个unsigned int 即为对应内核的版本号，将自己写的内核模块的版本号，手动改为这个版本，即刻加载模块。
* 将内核的所有版本号导出，此办法分析对应内核的&lt;code&gt;__stop___ksymtab_unused_gpl&lt;/code&gt;的符号， 然后执行一下python脚本即可将所有符号的版本号导出, 导出后找到&lt;code&gt;module_layout&lt;/code&gt;修改对应的版本即可。 &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0x&lt;/span&gt;&lt;span class="si"&gt;%x&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ida_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ea_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#print(name)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;__stop___kcrctab_unused_gpl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ida_name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ea_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0x&lt;/span&gt;&lt;span class="si"&gt;%x&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;::&lt;/span&gt;&lt;span class="si"&gt;%x&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;idaapi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;#    print(name)&lt;/span&gt;
    &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;2.问题二&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;disagrees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;__alloc_pages_nodemask&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;0x98b834db&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Unknown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;__alloc_pages_nodemask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;disagrees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page_address&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;0xb79a442e&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Unknown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page_address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;disagrees&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mem_map&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;0x41439568&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Unknown&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mem_map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;成功加载后，发现&lt;code&gt;dmesg&lt;/code&gt;的错误信息如上：
这也是版本号不一样的问题，通过问题一 解决办法2的方法找到所有函数的version数据然后填写到自己开发的模块中，然后进行加载即可解决.&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;内核没什么复杂的，复杂的地方在于管理各个模块之间的运行关系，本质还是很基础性的。&lt;/p&gt;</content></entry><entry><title>Ubuntu 23.04 dns解决办法</title><link href="alan717.github.io/ubuntu_dns.html" rel="alternate"></link><published>2024-01-30T00:00:00+08:00</published><updated>2024-01-30T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-01-30:alan717.github.io/ubuntu_dns.html</id><summary type="html">dns问题解决汇总</summary><content type="html">&lt;h2&gt;新安装ubuntu nslookup baidu.com 一直无法解析域名 dns指向127.0.0.53：53&lt;/h2&gt;
&lt;p&gt;正常情况下 ubuntu 新安装dns不会有什么问题.&lt;/p&gt;
&lt;h3&gt;解决办法一：重启dns服务或暂停服务&lt;/h3&gt;
&lt;p&gt;通常情况下&lt;br&gt;
解决办法:重启dns服务  &lt;br&gt;
&lt;code&gt;sudo systemctl restart systemd-resolve&lt;/code&gt;&lt;br&gt;
如果无法解决,停用systemd-resolve服务.排除systemd-resolve引起的错误.&lt;br&gt;
&lt;code&gt;sudo systemctl stop systemd-resolve&lt;/code&gt;&lt;br&gt;
&lt;code&gt;vim /etc/resolv.conf&lt;/code&gt; &lt;br&gt;
修改&lt;code&gt;nameserver 8.8.8.8&lt;/code&gt;&lt;br&gt;
尝试&lt;code&gt;nslookup qq.com&lt;/code&gt;查看解析路径,尝试解析路径，如果无法返回，请检查iptable设置，流量是否正确转发。&lt;/p&gt;
&lt;h3&gt;解决办法二：引入新的管理工具&lt;/h3&gt;</content></entry><entry><title>a UE4 game re.</title><link href="alan717.github.io/ue4_re.html" rel="alternate"></link><published>2024-01-23T00:00:00+08:00</published><updated>2024-01-23T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-01-23:alan717.github.io/ue4_re.html</id><summary type="html">ue4 game.</summary><content type="html">&lt;h2&gt;pre&lt;/h2&gt;
&lt;p&gt;com.xd.
&lt;a href=""&gt;https://github.com/kp7742/UE4Dumper&lt;/a&gt;
&lt;a href=""&gt;https://www.wolai.com/heHPqMdAtvPcJkpyeiwpeK&lt;/a&gt;
&lt;a href=""&gt;https://www.cnblogs.com/revercc/p/17627503.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ue4&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ue4+release-4.26-cl-0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;search for GUobjectArray with &lt;code&gt;"Max UObject count is invalid. It must be a number that is greater than 0."&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;search for GName with &lt;code&gt;"ByteProperty"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;in function &lt;code&gt;FString FNameEntry::GetPlainNameString() const&lt;/code&gt; location file &lt;code&gt;Engine\Source\Runtime\Core\Private\UObject\UnrealNames.cpp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;function &lt;code&gt;FName::GetComparisonNameEntry&lt;/code&gt; is necessary for GName.&lt;/p&gt;
&lt;p&gt;get those data offset with dumper tool.&lt;/p&gt;
&lt;h2&gt;tol&lt;/h2&gt;
&lt;p&gt;enjoy it!&lt;/p&gt;</content></entry><entry><title>提取内核DTB</title><link href="alan717.github.io/extract_dtb.html" rel="alternate"></link><published>2024-01-22T00:00:00+08:00</published><updated>2024-01-22T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-01-22:alan717.github.io/extract_dtb.html</id><summary type="html">提取DTB</summary><content type="html">&lt;h2&gt;Pre&lt;/h2&gt;
&lt;p&gt;在新内核3.5.7以后有了DTB，所以要进行提取。之前没有dtb是uboot传递给内核设备信息。&lt;/p&gt;
&lt;h2&gt;提取思路&lt;/h2&gt;
&lt;p&gt;DTB_HEADER是= b&amp;rdquo;\xd0\x0d\xfe\xed&amp;rdquo;
搜索dtb的头标志。然后如出来保存。&lt;/p&gt;
&lt;h2&gt;具体实现&lt;/h2&gt;
&lt;p&gt;Py,shell等。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#!/usr/bin/env python3
&amp;quot;&amp;quot;&amp;quot;
Copyright 2017-2021 Pablo Castellano

extract-dtb is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

extract-dtb is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with extract-dtb.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.
&amp;quot;&amp;quot;&amp;quot;

import argparse
import os
import string

__version__ = &amp;quot;1.3.dev0&amp;quot;

DTB_HEADER = b&amp;quot;\xd0\x0d\xfe\xed&amp;quot;


def dump_file(filename, content):
    with open(filename, &amp;quot;wb&amp;quot;) as fp:
        fp.write(content)


def safe_output_path(output_dir, dtb_filename_new):
    &amp;quot;&amp;quot;&amp;quot;Safely combines the output folder with the relative path of the dtb
    (which may contain subfolders) and creates the necessary folder
    structure.

    :returns: the resulting file name
    &amp;quot;&amp;quot;&amp;quot;
    if &amp;quot;../&amp;quot; in dtb_filename_new + &amp;quot;/&amp;quot;:
        raise RuntimeException(
            &amp;quot;DTB file path points outside of extraction&amp;quot;
            &amp;quot; directory: &amp;quot; + dtb_filename_new
        )
    ret = os.path.join(output_dir, dtb_filename_new)
    os.makedirs(os.path.dirname(ret), exist_ok=True)
    return ret


def split(args):
    &amp;quot;&amp;quot;&amp;quot;Reads a file and looks for DTB_HEADER occurrences (beginning of each DTB)
    Then extract each one. If possible, use the device model as filename.
    &amp;quot;&amp;quot;&amp;quot;
    positions = []

    with open(args.filename, &amp;quot;rb&amp;quot;) as fp:
        content = fp.read()

    dtb_next = content.find(DTB_HEADER)
    while dtb_next != -1:
        positions.append(dtb_next)
        dtb_next = content.find(DTB_HEADER, dtb_next + 1)

    if len(positions) == 0:
        print(&amp;quot;No appended dtbs found&amp;quot;)
        return

    if args.extract:
        os.makedirs(args.output_dir, exist_ok=True)
        begin_pos = 0
        for n, pos in enumerate(positions, 0):
            dtb_filename = get_dtb_filename(n)
            filepath = os.path.join(args.output_dir, dtb_filename)
            dump_file(filepath, content[begin_pos:pos])
            if n &amp;gt; 0:
                dtb_name = get_dtb_model(filepath)
                if dtb_name:
                    dtb_filename_new = get_dtb_filename(n, dtb_name)
                    dtb_filename_new_full = safe_output_path(
                        args.output_dir, dtb_filename_new
                    )
                    os.rename(filepath, dtb_filename_new_full)
                    dtb_filename = dtb_filename_new
            print(&amp;quot;Dumped {0}, start={1} end={2}&amp;quot;.format(dtb_filename, begin_pos, pos))
            begin_pos = pos

        # Last chunk
        dtb_filename = get_dtb_filename(n + 1)
        filepath = os.path.join(args.output_dir, dtb_filename)
        dump_file(filepath, content[begin_pos:])
        dtb_name = get_dtb_model(filepath)
        if dtb_name:
            dtb_filename_new = get_dtb_filename(n + 1, dtb_name)
            os.rename(
                os.path.join(filepath), os.path.join(args.output_dir, dtb_filename_new)
            )
            dtb_filename = dtb_filename_new
        print(
            &amp;quot;Dumped {0}, start={1} end={2}&amp;quot;.format(
                dtb_filename, begin_pos, len(content)
            )
        )
        print(
            &amp;quot;Extracted {0} appended dtbs + kernel to {1}&amp;quot;.format(
                len(positions), args.output_dir
            )
        )
    else:
        print(&amp;quot;Found {0} appended dtbs&amp;quot;.format(len(positions)))


def get_dtb_filename(n, suffix=&amp;quot;&amp;quot;):
    if n == 0:
        return &amp;quot;00_kernel&amp;quot;
    n = str(n).zfill(2)
    basename = &amp;quot;{0}_dtbdump&amp;quot;.format(n)
    if suffix != &amp;quot;&amp;quot;:
        basename += &amp;quot;_&amp;quot; + suffix.replace(&amp;quot; &amp;quot;, &amp;quot;_&amp;quot;).replace(&amp;quot;/&amp;quot;, &amp;quot;_&amp;quot;)
    return basename + &amp;quot;.dtb&amp;quot;


def get_dtb_model(filename, min_length=4):
    &amp;quot;&amp;quot;&amp;quot;Finds the first printable string in a file with length greater
    than min_length. Replaces spaces with underscores.
    &amp;quot;&amp;quot;&amp;quot;
    with open(filename, errors=&amp;quot;ignore&amp;quot;) as f:
        result = &amp;quot;&amp;quot;
        for c in f.read():
            if c in string.printable:
                result += c
                continue
            if len(result) &amp;gt;= min_length:
                return result.replace(&amp;quot; &amp;quot;, &amp;quot;_&amp;quot;).replace(&amp;quot;\t&amp;quot;, &amp;quot;_&amp;quot;).replace(&amp;quot;\n&amp;quot;, &amp;quot;_&amp;quot;).replace(&amp;quot;\r&amp;quot;, &amp;quot;_&amp;quot;)
            result = &amp;quot;&amp;quot;
        if len(result) &amp;gt;= min_length:  # catch result at EOF
            return result.replace(&amp;quot; &amp;quot;, &amp;quot;_&amp;quot;).replace(&amp;quot;\t&amp;quot;, &amp;quot;_&amp;quot;).replace(&amp;quot;\n&amp;quot;, &amp;quot;_&amp;quot;).replace(&amp;quot;\r&amp;quot;, &amp;quot;_&amp;quot;)
    return None


def main():
    parser = argparse.ArgumentParser(description=&amp;quot;Extract dtbs from kernel images.&amp;quot;)
    parser.add_argument(&amp;quot;filename&amp;quot;, help=&amp;quot;Android kernel image&amp;quot;)
    parser.add_argument(
        &amp;quot;-o&amp;quot;, dest=&amp;quot;output_dir&amp;quot;, default=&amp;quot;dtb&amp;quot;, required=False, help=&amp;quot;Output directory&amp;quot;
    )
    parser.add_argument(
        &amp;quot;-n&amp;quot;,
        dest=&amp;quot;extract&amp;quot;,
        action=&amp;quot;store_false&amp;quot;,
        default=True,
        required=False,
        help=&amp;quot;Do not extract, just output information&amp;quot;,
    )
    parser.add_argument(&amp;quot;-V&amp;quot;, &amp;quot;--version&amp;quot;, action=&amp;quot;version&amp;quot;, version=__version__)

    args = parser.parse_args()

    split(args)


if __name__ == &amp;quot;__main__&amp;quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>托福和雅思</title><link href="alan717.github.io/tuofuvsyasi.html" rel="alternate"></link><published>2024-01-22T00:00:00+08:00</published><updated>2024-01-22T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-01-22:alan717.github.io/tuofuvsyasi.html</id><summary type="html">english stuff</summary><content type="html"></content></entry><entry><title>kernel build 汇总</title><link href="alan717.github.io/krnl_build.html" rel="alternate"></link><published>2024-01-11T00:00:00+08:00</published><updated>2024-01-11T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-01-11:alan717.github.io/krnl_build.html</id><summary type="html">内核编译遇到的所有问题汇总</summary><content type="html">&lt;h2&gt;err1&lt;/h2&gt;
&lt;p&gt;无法生成uimage&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo apt install u-boot-tools&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;err2&lt;/h2&gt;
&lt;p&gt;error: implicit declaration of function &amp;lsquo;get_user&amp;rsquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1&gt;include &lt;asm/uaccess.h&gt;&lt;/h1&gt;
&lt;/blockquote&gt;
&lt;h2&gt;err3&lt;/h2&gt;</content></entry><entry><title>emacs使用记录</title><link href="alan717.github.io/emacs.html" rel="alternate"></link><published>2024-01-10T00:00:00+08:00</published><updated>2024-01-10T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-01-10:alan717.github.io/emacs.html</id><summary type="html">emacs日常使用的方方面面</summary><content type="html">&lt;h2&gt;env&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Its&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;--build x86_64-linux-gnu --prefix=/usr --sharedstatedir=/var/lib --libexecdir=/usr/lib --localstatedir=/var/lib --infodir=/usr/share/info --mandir=/usr/share/man --enable-libsystemd --with-pop=yes --enable-locallisppath=/etc/emacs:/usr/local/share/emacs/27.1/site-lisp:/usr/local/share/emacs/site-lisp:/usr/share/emacs/27.1/site-lisp:/usr/share/emacs/site-lisp --with-sound=alsa --without-gconf --with-mailutils --build x86_64-linux-gnu --prefix=/usr --sharedstatedir=/var/lib --libexecdir=/usr/lib --localstatedir=/var/lib --infodir=/usr/share/info --mandir=/usr/share/man --enable-libsystemd --with-pop=yes --enable-locallisppath=/etc/emacs:/usr/local/share/emacs/27.1/site-lisp:/usr/local/share/emacs/site-lisp:/usr/share/emacs/27.1/site-lisp:/usr/share/emacs/site-lisp --with-sound=alsa --without-gconf --with-mailutils --with-cairo --with-x=yes --with-x-toolkit=gtk3 --with-toolkit-scroll-bars &amp;#39;CFLAGS=-g -O2 -ffile-prefix-map=/build/emacs-WL9mhG/emacs-27.1+1=. -fstack-protector-strong -Wformat -Werror=format-security -Wall&amp;#39; &amp;#39;CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2&amp;#39; &amp;#39;LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ubuntu 环境下使用emacs.
emacs 使用快捷键之后就是肌肉记忆，不用记忆都记住了。很不自觉就使用上了。
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/p&gt;
&lt;h2&gt;foundmental&lt;/h2&gt;
&lt;h3&gt;复制&lt;/h3&gt;
&lt;p&gt;选择使用shift 然后选择，然后 alt-w 复制，然后使用C-y粘贴。&lt;/p&gt;
&lt;h3&gt;退出&lt;/h3&gt;
&lt;p&gt;C-x C-c&lt;/p&gt;
&lt;h3&gt;保存&lt;/h3&gt;
&lt;p&gt;c-x c-s 保存。&lt;/p&gt;
&lt;h4&gt;另存为&lt;/h4&gt;
&lt;p&gt;C-x C-w 按提示，输入文件名，另存为.&lt;/p&gt;
&lt;h3&gt;打开文件&lt;/h3&gt;
&lt;p&gt;C—x C-f 打开。&lt;/p&gt;
&lt;h3&gt;退出&lt;/h3&gt;
&lt;p&gt;C-x C-c &lt;/p&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;h3&gt;关闭备份文件 disable tlide file creation.&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;(setq make-backup-files nil) ; stop creating ~ files&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;use menu bar in terminal mode&lt;/h3&gt;
&lt;p&gt;F10 或者c-h k查看帮助.&lt;/p&gt;
&lt;h3&gt;取消 cancel&lt;/h3&gt;
&lt;p&gt;C-g or ESC ESC ESC tap three times.&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h2&gt;flycheck&lt;/h2&gt;
&lt;h3&gt;行号&lt;/h3&gt;
&lt;p&gt;add &lt;code&gt;(global-display-line-numbers-mode)&lt;/code&gt; to &lt;code&gt;.emacs.el&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;c/c++ ide&lt;/h2&gt;
&lt;h3&gt;LSP&lt;/h3&gt;
&lt;h4&gt;lsp-mode&lt;/h4&gt;
&lt;h4&gt;treemacs&lt;/h4&gt;
&lt;h4&gt;lsp-ui&lt;/h4&gt;
&lt;h3&gt;CScope&lt;/h3&gt;</content></entry><entry><title>ARM64指令汇总</title><link href="alan717.github.io/ARM64.html" rel="alternate"></link><published>2024-01-08T00:00:00+08:00</published><updated>2024-01-08T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-01-08:alan717.github.io/ARM64.html</id><summary type="html">arm64下常用的指令</summary><content type="html">&lt;h2&gt;arch&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="img/armv8_a.png"&gt;
&lt;img alt="" src="img/armv8_a_properties.png"&gt;&lt;/p&gt;
&lt;h2&gt;instruction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;STP&lt;/code&gt;=Store Pair
存一对儿，小端存储顺序，从小到大。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RSB OP1 OP2&lt;/code&gt; OP2-OP1 反向减法。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MOVK&lt;/code&gt; Move wide with keep 将一个可选移位的 16 位立即值移动到一个寄存器中，保持其他位不变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MOVT 把立即数放到高16bit  mov thumb 头.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;MOVW 把立即数放到低16bit. mov wide &lt;/li&gt;
&lt;li&gt;LDR  加载到寄存器中.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;寄存器&lt;/h2&gt;
&lt;p&gt;AArch 拥有 31 个通用寄存器，系统运行在 64 位状态下的时候名字叫 Xn，运行在 32 位的时候就叫 Wn.
&lt;img alt="" src="img/armv8_reg.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;32 位 W 寄存器构成相应 64 位 X 寄存器的下半部分。 也就是说，W0映射到 X0 的低位字，W1 映射到 X1 的低位字。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;ABI&lt;/h2&gt;
&lt;h3&gt;一般调用&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="img/armv8_register.png"&gt;&lt;/p&gt;
&lt;h3&gt;浮点调用&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="img/armv8_simd_reg.png"&gt;&lt;/p&gt;</content></entry><entry><title>Linux dtb的探索</title><link href="alan717.github.io/linux_dtb.html" rel="alternate"></link><published>2024-01-05T00:00:00+08:00</published><updated>2024-01-05T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-01-05:alan717.github.io/linux_dtb.html</id><summary type="html">dtb的历史引入及其老旧Linux系统的支持</summary><content type="html">&lt;h2&gt;HIS&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting with the release of Linux 3.5.7, a new feature known as Device Trees has fundamentally changed the way that boards are represented by the kernel. The “C” modules used in earlier kernels has been replaced with Device Tree Blobs (DTBs) as a way of representing the structure and connections for a particular board.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网上有很多关于这个讨论，在elinux.org上可以查阅。&lt;/p&gt;</content></entry><entry><title>Ghidra自动化分析PowerPC使用</title><link href="alan717.github.io/Ghidra.html" rel="alternate"></link><published>2024-01-04T00:00:00+08:00</published><updated>2024-01-04T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2024-01-04:alan717.github.io/Ghidra.html</id><summary type="html">Ghidra 自动化解决PPC binary更新自动patch问题</summary><content type="html">&lt;h2&gt;env前情提示&lt;/h2&gt;
&lt;p&gt;使用了一个ppc但是ppc的check函数一直变化，地址也随机，但是它单独使用了memcmp函数，只在这个函数使用，所以我们准备patch这个memcmp函数默认返回0.
问题是要自动化automatically！ &lt;/p&gt;
&lt;p&gt;因此G出Ghidra插件无头化.&lt;/p&gt;
&lt;h2&gt;Go!&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;gt;analyzeHeadless C:\Users\Kian\Desktop\ghidra_pro  control -process licensed  -postScript D:\ghidra_10.2.2_PUBLIC_20221115\ghidra_10.2.2_PUBLIC\Ghidra\Features\Python\ghidra_scripts\ghidra_basics.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;直接运行成功，然后&lt;/p&gt;</content></entry><entry><title>记录日语单词</title><link href="alan717.github.io/danci_jp.html" rel="alternate"></link><published>2023-09-23T00:00:00+08:00</published><updated>2023-09-23T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2023-09-23:alan717.github.io/danci_jp.html</id><summary type="html">日语单词本</summary><content type="html">&lt;h2&gt;pre&lt;/h2&gt;
&lt;p&gt;目标3000个日语单词 ,N3水平.参加未来的日语考试.&lt;/p&gt;
&lt;h2&gt;输入法技巧 microsoft jap&lt;/h2&gt;
&lt;p&gt;微软日语输入法 输入技巧：&lt;br&gt;
1. っ(促音)双打后一个假名的罗马字发音的第一个辅音，如“もっと”为“motto”。&lt;br&gt;
2. 拨音ん用nn表示;促音用后面辅音字母表示，如：“はってん”为“hattenn” &lt;br&gt;
3. 小写的あいうえお 用la,li,lu,le,lo即可。&lt;br&gt;
4. “コーヒー”中的“ー”是“P”右上方的“-”号键。&lt;br&gt;
5. 片假名、平假名的转换可用：击F6键变成平假名，击F7键变成片假名。&lt;br&gt;
6. 在日语输入法中有一个“IME Pad”，里面有手写输入。    &lt;/p&gt;
&lt;p&gt;注：&lt;br&gt;
1. &amp;ldquo;IMEパット&amp;rdquo;功能 ：相当于手写板,可以反查日语汉字.不会读音时可以选用此功能.&lt;br&gt;
2. ALT+~ ：可切换英文输入法Direct Input(图标A) 和日文输入法Hiragana(图标あ) &lt;br&gt;
3. 快捷键：F6转换为平假名，F8转换为半角片假名，F9转换为全角英文数字，F10转换为半角英文数字 &lt;br&gt;
4. F5偏旁发音输入大法：只要懂偏旁发音可以很快输出怪僻字，如“轼”用くるま+F5输入，出现输入板界面，并看到了该字，点击它就可以把它输入到文档。&lt;br&gt;
5. 常用符号输入法：&lt;br&gt;
 * きごう+F5 得到所有记号&lt;br&gt;
 * たんい 得到所有单位符号&lt;br&gt;
 * すうがく 得到所有数学符号&lt;br&gt;
 * ぎりしゃ 得到希腊字母符号  &lt;br&gt;
6. 日文输入法是通过 “回车(Enter)”确定日文，按“空格”选择“汉字”。&lt;br&gt;
7. 小 “ぁ　ぃ　ぅ　ぇ　ぉ”打法: x+罗马读音,&lt;br&gt;
例：  &lt;br&gt;
   小「ぁ」「ぃ」「ぅ」「ぇ」「ぉ」  &lt;br&gt;
   x + 读音 「xa」「xi」「xu」「xe」「xo」  &lt;br&gt;
   l +读音　「la」「li」 「lu」 「le」 「lo」 &lt;br&gt;
8. “ん”怎么打?：打nn即可;
9. 如何“コーヒー”中的“ー”：打“-”(减号)
10. “っ”怎么打?：双打后一个假名的罗马字发音的第一个辅音，如“もっと”为“motto”。 长音
11. 读音和输入方法的差异
例：&lt;br&gt;
を　一般读「o」， 但是打字时必须输「wo」。&lt;br&gt;
へ　一般读「e」， 但是打字时必须输「he」。&lt;br&gt;
は　一般读「wa」，但是打字时必须输「ha」。&lt;br&gt;
づ　一般读「zu」，但是打字时必须输「du」。  &lt;/p&gt;
&lt;h2&gt;list&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://jlptsensei.com/jlpt-n3-grammar-list/#"&gt;ref:link1&lt;/a&gt;
1. はは　母親&lt;br&gt;
2. ちち　父親&lt;br&gt;
3. りょうしん　両親&lt;br&gt;
4. リョウ・ふたつ　両&lt;br&gt;
5. 家 家に　いえ家 &lt;br&gt;
6. 近く　ちか &lt;br&gt;
7. いち　&lt;br&gt;
8. に &lt;br&gt;
9. さん &lt;br&gt;
10. よん &lt;br&gt;
11. おはよう &lt;br&gt;
12. しろ &lt;br&gt;
13. あか &lt;br&gt;
14. あお &lt;br&gt;
15. よる &lt;br&gt;
16. おさけ　&lt;br&gt;
17. やさい　&lt;br&gt;
18. すし&lt;br&gt;
19. てりやき　照り焼き &lt;br&gt;
20. きたないやさい &lt;br&gt;
21. あまいすし　　　寿司 &lt;br&gt;
22. すき    喜欢 &lt;br&gt;
23. おはよう 早 &lt;br&gt;
24. こんにちは  你好 &lt;br&gt;
25. さよなら    再见&lt;br&gt;
26. 住んで　　すんで　住所 &lt;br&gt;
27. 下さい　下さい　  &lt;/p&gt;</content></entry><entry><title>SHINEY650摩托车改装</title><link href="alan717.github.io/motorcycle.html" rel="alternate"></link><published>2023-08-25T00:00:00+08:00</published><updated>2023-08-25T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2023-08-25:alan717.github.io/motorcycle.html</id><summary type="html">折腾SHINEY650摩托车的过程</summary><content type="html">&lt;h2&gt;env&lt;/h2&gt;
&lt;p&gt;8月购买了鑫源650摩托。&lt;/p&gt;
&lt;h3&gt;spec&lt;/h3&gt;
&lt;p&gt;| sepc            | value                  | 品牌            |&lt;br&gt;
|-----------------|------------------------|---------------|
| 发动机             | 单缸四冲程 油冷·650cc         |               |
| 发动机型号           | 1100YMT                |               |
| 排量：             | 650                    |               |
| 精确排量cc:         | 644                    |               |
| 缸径x行程(mm)：      | 100x82                 |               |
| 发动机冲程           | 四冲程                    |               |
| 压缩比             | 8.3:1                  |               |
| 冷却方式            | 油冷                     |               |
| 马力Ps            | 40.8                   |               |
| 最大功率            | 30                     |               |
| 最大功率转速(rpm)     | 6000                   |               |
| 最大扭矩            | 50                     |               |
| 最大扭矩转速          | 5000                   |               |
| 供油方式            | 电喷                     |               |
| 官方平均油耗(L/100km) | 4.5                    |               |
| 变速器             | 国际5档                   |               |
| 离合器             | 湿式多片离合                 |               |
| 前轮规格            | 100/90-19              | 建大            |
| 后轮规格            | 130/80-18              |               |
| 轮胎形式            | 真空胎                    |               |
| 轮辋              | 钢制辐条式                  |               |
| 前制动系统           | 320mm单碟对置四活塞卡钳         |               |
| 后制动系统           | 240mm单碟双活塞卡钳           |               |
| 前后灯             | led                    |               |
| 转向灯             | 卤素                     |               |
| ABS防抱死系统        | 标配前后                   |               |
| 油门配置            | 单拉线油门                  |               |
| 干重(kg)          | 173                    |               |
| 整备质量(kg)        | 183                    |               |
| 前倾角度(°)         | 28                     |               |
| 最小转弯半径(m)       | 2.45                   |               |
| 最大有效载荷(kg)      | 333                    |               |
| 前悬挂系统           | φ41mm双正置液压弹簧减震,行程110mm |               |
| 后悬挂系统           | φ62mm双液压弹簧复合减震,行程50mm  |               |
| 最小离地间隙(mm)      | 160                    |               |
| 轴距(mm)          | 1420                   |               |
| 座高(mm)          | 800                    |               |
| 高度(mm)          | 1150                   |               |
| 宽度(mm)          | 790                    |               |
| 长度(mm)          | 2110                   |               |&lt;/p&gt;
&lt;h2&gt;改装&lt;/h2&gt;
&lt;h3&gt;问题点：引擎运行不平顺，有感觉供油不足的情况&lt;/h3&gt;
&lt;p&gt;初步分析是引擎ecu 程序处理进气和喷油问题，需要分析ECU.&lt;/p&gt;
&lt;h4&gt;ECU&lt;/h4&gt;
&lt;p&gt;购买了同型号ECU，拆解ECU，并尝试PC通信，焊接JTAG管脚供电，然后dump binary程序。
分析中.... 待后续更新。&lt;/p&gt;</content></entry><entry><title>记录日语文法</title><link href="alan717.github.io/%E6%97%A5%E8%AF%ADwenfa.html" rel="alternate"></link><published>2023-07-03T00:00:00+08:00</published><updated>2023-07-03T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2023-07-03:alan717.github.io/%E6%97%A5%E8%AF%ADwenfa.html</id><summary type="html">日语文法</summary><content type="html">&lt;h2&gt;pre&lt;/h2&gt;
&lt;p&gt;https://www.sigure.tw/learn-japanese/grammar/n5/32.php&lt;/p&gt;
&lt;h1&gt;文法&lt;/h1&gt;
&lt;h2&gt;【助詞篇】「で」解析篇&lt;/h2&gt;
&lt;h4&gt;表動作的立足點&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;文法：場所、位置、空間＋で＋動態動詞
表示動作施行的立足點，也就是在哪裡做的動作，中文多譯為「在」。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;東京駅で電車を降ります。&lt;br&gt;
在東京車站下車。&lt;/li&gt;
&lt;li&gt;図書館で日本語を勉強します。
在圖書館念日文。&lt;/li&gt;
&lt;li&gt;日本で生まれました。
在日本出生。&lt;/li&gt;
&lt;li&gt;東京で手紙を送ります。
在東京寄信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;「で」跟「に」的差別&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;東京で手紙を送ります。
在東京寄信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這句的意思是在東京做了寄信這個動作，動作的立足點在東京，至於寄去哪則沒有提。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;東京に手紙を送ります。
寄信到東京。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這句的意思是寄信到東京，「に」表示動作的歸著點，而非立足點，因此在哪寄並不知道。歸著點就是到達點、著落點。&lt;/p&gt;
&lt;p&gt;端看你想表達的是動作的「立足點」，還是動作的「歸著點」，來決定使用「で」或「に」。基本上很少會同時使用，如「東京で大阪に手紙を送る（不自然）」，一個動作又是立足點又是歸著點，難免會語意不清，基本上就是看想表達哪個就用哪個。如果想說「從東京寄信到大阪」則是說「東京から大阪に手紙を送ります」。&lt;/p&gt;
&lt;p&gt;「で」基本上就是指在哪裡做的事情，而「に」則是著落的點，因此在表示動作的場所時，「で」較有活動空間，「に」相對來說會侷限得比較小。以「請在這裡稍等一下」為例，會說「ここで待ってください」，而不會說「ここに待ってください」。&lt;/p&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;小結
表動作的存在場所時，可以用動態動詞用「で」，靜態動詞用「に」來簡單區別，所謂的動態動詞就是做得出的動作、較明顯的動作，靜態動詞偏向一種狀態，比較不明顯或是做不出來的動作，例如「いる、ある（在）」。&lt;/p&gt;
&lt;p&gt;例：勉強する（動態動詞）&lt;/p&gt;
&lt;p&gt;学校で勉強します。&lt;br&gt;
　 在學校學習。&lt;br&gt;
学校に勉強します。 x&lt;br&gt;
　 不自然的用法。  &lt;/p&gt;
&lt;p&gt;例：咲く（靜態動詞）  &lt;/p&gt;
&lt;p&gt;庭に花が咲いています。&lt;br&gt;
　 庭院裡開著花。&lt;br&gt;
庭で花が咲いています。  x
　 不自然的用法。&lt;br&gt;
「勉強」的意思是學習、用功、念書等等，由於學習並非靜止不動（例如寫字、跟老師互動等），因此用「で」，無論你的「勉強」有多靜態都不會用「に」，這樣是不自然的，而「花が咲いています」用「に」是因為花開非常緩慢，幾乎是靜止的動作，「花開」與其說是花的動作，倒不如說是花的狀態，因此也不會用「で」。當然如果是「百花群放」那樣很有動作感的畫面，也是有用「で」的情況，但一般情況原則上都是用「に」。&lt;/p&gt;
&lt;h2&gt;表狀態的範圍或場所&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;文法：範圍＋で＋一番＋具有形容詞性的詞類
表示某範圍內最極端的狀態，中譯多為「在～之中、在～當中」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;クラスで一番頭がいい人は誰ですか。&lt;br&gt;
班上最聰明的人是誰？&lt;br&gt;
果物の中で何が一番好きですか。&lt;br&gt;
水果之中你最喜歡哪個？&lt;br&gt;
こちらは日本で一番有名な画家です。&lt;br&gt;
這位是日本最有名的畫家。   &lt;/p&gt;
&lt;h3&gt;什麼時候要加「の中」？&lt;/h3&gt;
&lt;p&gt;「で」用於表示一個場所，而「～の中」表示「當中、之中」，因此當某個範圍已經屬於整個空間時就不用再加上「の中」，如「世界」。反之，如果這個範圍是有多種類別或是並非整體空間，則加上「の中」，如「アニメの中で～」。&lt;/p&gt;
&lt;p&gt;ノート：
已屬整體：クラスで、日本で、世界で、海外で…
多種分類：果物の中で、外国語の中で、アニメの中で…&lt;/p&gt;
&lt;h2&gt;表共同參與的人數&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;文法：人數（或類似人數概念）＋で＋動作
表示參與動作的人數，包含獨自一個人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一人で食事します。
一個人吃飯。
二人で歌を歌います。
兩人一起唱歌。
これはみんなで作ったのです。
這個是大家一起做的。
自分でパソコンを修理しました。
自己修好電腦。
家族で旅行します。
全家一起去旅行。&lt;/p&gt;</content></entry><entry><title>排序算法</title><link href="alan717.github.io/__sort.html" rel="alternate"></link><published>2023-02-23T00:00:00+08:00</published><updated>2023-02-23T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2023-02-23:alan717.github.io/__sort.html</id><summary type="html">排序算法汇总</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;本质上还是属于原地算法
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;冒泡排序&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F"&gt;ref:&lt;/a&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bubble_sort&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;array,&lt;span class="w"&gt; &lt;/span&gt;length&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;var&lt;span class="w"&gt; &lt;/span&gt;i,&lt;span class="w"&gt; &lt;/span&gt;j&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;length-1&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;j&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;length-2-i&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;array&lt;span class="o"&gt;[&lt;/span&gt;j&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;array&lt;span class="o"&gt;[&lt;/span&gt;j+1&lt;span class="o"&gt;])&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;swap&lt;span class="o"&gt;(&lt;/span&gt;array&lt;span class="o"&gt;[&lt;/span&gt;j&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;array&lt;span class="o"&gt;[&lt;/span&gt;j+1&lt;span class="o"&gt;])&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;梳排序&lt;/h2&gt;
&lt;h2&gt;选择排序&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;void&lt;span class="w"&gt; &lt;/span&gt;selection_sort&lt;span class="o"&gt;(&lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="o"&gt;[]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;len&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;i,j,temp&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;len&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i++&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="w"&gt; &lt;/span&gt;+&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;j&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;len&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;j++&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;//走訪未排序的元素
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;[&lt;/span&gt;j&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="o"&gt;[&lt;/span&gt;min&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;//找到目前最小值
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;min&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;j&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;//紀錄最小值
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;min&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;i&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nv"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;a&lt;span class="o"&gt;[&lt;/span&gt;min&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;//交換兩個變數
&lt;span class="w"&gt;          &lt;/span&gt;a&lt;span class="o"&gt;[&lt;/span&gt;min&lt;span class="o"&gt;]=&lt;/span&gt;a&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;a&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]=&lt;/span&gt;temp&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;/*&lt;span class="w"&gt; &lt;/span&gt;swap&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;a&lt;span class="o"&gt;[&lt;/span&gt;min&lt;span class="o"&gt;]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;a&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;*/&lt;span class="w"&gt;   &lt;/span&gt;//做交換
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

/*
void&lt;span class="w"&gt; &lt;/span&gt;swap&lt;span class="o"&gt;(&lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;*a,int&lt;span class="w"&gt; &lt;/span&gt;*b&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;//交換兩個變數
&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;temp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*a&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;*a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*b&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;*b&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;temp&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;插入排序&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;void&lt;span class="w"&gt; &lt;/span&gt;insertion_sort&lt;span class="o"&gt;(&lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;arr&lt;span class="o"&gt;[]&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;len&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;int&lt;span class="w"&gt; &lt;/span&gt;i,j,key&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;i!&lt;span class="o"&gt;=&lt;/span&gt;len&lt;span class="p"&gt;;&lt;/span&gt;++i&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arr&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;i-1&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;j&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;arr&lt;span class="o"&gt;[&lt;/span&gt;j&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt;key&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;arr&lt;span class="o"&gt;[&lt;/span&gt;j+1&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;arr&lt;span class="o"&gt;[&lt;/span&gt;j&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;j--&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;arr&lt;span class="o"&gt;[&lt;/span&gt;j+1&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;key&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>安捷伦衍射仪分析</title><link href="alan717.github.io/anjielun.html" rel="alternate"></link><published>2022-11-23T00:00:00+08:00</published><updated>2022-11-23T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2022-11-23:alan717.github.io/anjielun.html</id><summary type="html">一个安捷伦衍射仪的分析</summary><content type="html">&lt;h2&gt;env&lt;/h2&gt;
&lt;p&gt;接触了一个实验室的安捷伦衍射仪的分析
全称是:&lt;code&gt;6230B 飞行时间 (TOF) 液质联用系统&lt;/code&gt;
这个衍射仪还很火，看到很多学校的实验室都有这个设备原名tofserver
这个设备情况比较简单，pc104通过高速plx连接fpga和dsp通过pcie和dsp的高速io直接访问获取数据。整体使用的是slackware linux 2.6的系统，也是ko实现高速
dma操作，整体的系统功能解耦设计很棒，代码符号在设备中也有存根。重点在于他的高速io直接通信效率特别高。可以自己进行二次开发。&lt;/p&gt;
&lt;h2&gt;分析&lt;/h2&gt;
&lt;p&gt;解决好的原因是 排查了系统的启动问题和内存memory corruption问题发现tofserver在分配内存malloc时候使用的大小为0 ，这个0是来自于dsp直接在dma  中
存放的数据大小。由此直接上机测试。问题找到解决。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;slackware linux 第一次接触，古老稳健的linux发行版。挺有意思。这种高速采集设备都是通过fpga和dsp实现的图形设别算法获取针对测量值。&lt;/p&gt;</content></entry><entry><title>GO1.21.5分析</title><link href="alan717.github.io/go_re.html" rel="alternate"></link><published>2022-08-13T00:00:00+08:00</published><updated>2022-08-13T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2022-08-13:alan717.github.io/go_re.html</id><summary type="html">go逆向</summary><content type="html">&lt;h2&gt;env&lt;/h2&gt;
&lt;p&gt;版本是1.21.5 最新
window10&lt;/p&gt;
&lt;h2&gt;pre&lt;/h2&gt;
&lt;p&gt;go编译出来是native代码，所以之间看原生函数吧。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ps:
由于是二进制的形式，这里go的数据类型识别，如字符串 数据，数据结构都不是重点。
在此不再过多描述，显得冗余。只关系具体的数据流和算法实现表现，和函数flow。&lt;/p&gt;
&lt;p&gt;最主要的入口是&lt;code&gt;runtime_main&lt;/code&gt; 
在go执行时候首先进行的运行时初始化，判断当前包时lib还是执行程序，有没有进行功能性的函数hook，
这些代码是编译器模板化的代码， 这部分可以对照go的编译器源码生成的函数具体对待。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体的分析来看，具体的分析切入点是什么，是分析一个网络程序还是分析追踪一个算法模块。这很重要。&lt;/p&gt;
&lt;h2&gt;难点&lt;/h2&gt;
&lt;h3&gt;难点一 ：符号&lt;/h3&gt;
&lt;p&gt;一般发布的go默认带符号，别人的程序会不带符号
不带符号就是编译时候直接编译器添加ld flag：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-ldflags=&amp;quot;-s -w&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;效果如图：&lt;br&gt;
before&lt;br&gt;
&lt;img alt="" src="./img/go1.png"&gt;
after&lt;br&gt;
&lt;img alt="" src="./img/go2.png"&gt;&lt;/p&gt;
&lt;p&gt;这部分可用diff binary实现识别。&lt;/p&gt;
&lt;h3&gt;难点二：加二进制壳&lt;/h3&gt;
&lt;p&gt;常见的二进制壳：upx 等变种
此类壳主要是找到函数entry point.关键找到函数入口，需要动态调试和多次加载识别。&lt;/p&gt;
&lt;h3&gt;难度三：函数复杂性&lt;/h3&gt;
&lt;p&gt;函数的复杂性在于指令流和go编译器的自修改。 通常是通过修改go编译器来加入垃圾指令特殊原语。&lt;br&gt;
这类分析主要是找到关键函数进行回溯数据，回溯栈，难点在于追踪，需要经验和时间。
其中还包括语言特性（反射实现，协程实现，伸缩栈，延迟执行defer，调用约定，cgo）&lt;/p&gt;
&lt;h3&gt;难度四：数据结构复杂度&lt;/h3&gt;
&lt;p&gt;在go中的切片 数组结构体，字典都有自定义的数据结构需要来识别。在没有魔改的情况下，直接对照源码可以分析，如果进行了魔改就要凭借经验来识别并进行分析处理。&lt;/p&gt;
&lt;h4&gt;string&lt;/h4&gt;
&lt;p&gt;go的字符不像arm那样直接存储，因为是强类型，所以是直接存在字符表中类似于elf的字符表，然后根据长度和offset来加载，在追踪时候和别的不同，需要注意。&lt;/p&gt;
&lt;h2&gt;info&lt;/h2&gt;
&lt;h3&gt;GOPATH&lt;/h3&gt;
&lt;p&gt;GOPATH is a variable that defines the root of your workspace.&lt;/p&gt;
&lt;h3&gt;GOROOT&lt;/h3&gt;
&lt;p&gt;GOROOT is a variable that defines where your Go SDK is located. &lt;/p&gt;</content></entry><entry><title>Python高级语法</title><link href="alan717.github.io/python_advance.html" rel="alternate"></link><published>2022-08-13T00:00:00+08:00</published><updated>2022-08-13T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2022-08-13:alan717.github.io/python_advance.html</id><summary type="html">py</summary><content type="html">&lt;h2&gt;pre&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Read The Fucking Source Code.&lt;/p&gt;
&lt;p&gt;A picture is worth a thousand words&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;MISC&lt;/h2&gt;
&lt;p&gt;asterisk （*）&lt;/p&gt;
&lt;h2&gt;基础&lt;/h2&gt;
&lt;h3&gt;传参&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;*args&lt;/code&gt;表示*args enable us to pass the variable number of non-keyword arguments to functions, but we cannot use this to pass keyword arguments. Keyword arguments mean that they contain a key-value pair, like a Python dictionary.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;**kwargs&lt;/code&gt;allows us to pass any number of keyword arguments.&lt;/p&gt;
&lt;h3&gt;修饰器&lt;/h3&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;before Execution&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# getting the returned value&lt;/span&gt;
        &lt;span class="n"&gt;returned_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;after Execution&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# returning the value to the original frame&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;returned_value&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner1&lt;/span&gt;


&lt;span class="c1"&gt;# adding decorator to the function&lt;/span&gt;
&lt;span class="nd"&gt;@hello_decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum_two_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Inside the function&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;# getting the value through return of the function&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sum =&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum_two_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;before Execution
Inside the function
after Execution
Sum = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;chain decorators&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# code for testing decorator chaining &lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decor1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt; 

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt; 

&lt;span class="nd"&gt;@decor1&lt;/span&gt;
&lt;span class="nd"&gt;@decor&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;num&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="nd"&gt;@decor&lt;/span&gt;
&lt;span class="nd"&gt;@decor1&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mf"&gt;400&lt;/span&gt;
&lt;span class="mf"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;协程&lt;/h3&gt;
&lt;p&gt;一系列api来执行并行任务，给出一些区别。&lt;/p&gt;
&lt;h4&gt;协程&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;hello
world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意：简单地调用一个协程并不会使其被调度执行&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;main()
&amp;lt;coroutine object main at 0x1053bb7c8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;可等待对象&lt;/h4&gt;
&lt;p&gt;可等待 对象有三种主要类型: 协程, 任务 和 Future.&lt;/p&gt;
&lt;h5&gt;协程&lt;/h5&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Nothing happens if we just call &amp;quot;nested()&amp;quot;.&lt;/span&gt;
    &lt;span class="c1"&gt;# A coroutine object is created but not awaited,&lt;/span&gt;
    &lt;span class="c1"&gt;# so it *won&amp;#39;t run at all*.&lt;/span&gt;
    &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Let&amp;#39;s do it differently now and await it:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# will print &amp;quot;42&amp;quot;.&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;任务&lt;/h5&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Schedule nested() to run soon concurrently&lt;/span&gt;
    &lt;span class="c1"&gt;# with &amp;quot;main()&amp;quot;.&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# &amp;quot;task&amp;quot; can now be used to cancel &amp;quot;nested()&amp;quot;, or&lt;/span&gt;
    &lt;span class="c1"&gt;# can simply be awaited to wait until it is complete:&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;Futures&lt;/h5&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;function_that_returns_a_future_object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# this is also valid:&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gather&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;function_that_returns_a_future_object&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;some_python_coroutine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;一个很好的返回对象的低层级函数的示例是 loop.run_in_executor()。&lt;/p&gt;
&lt;h4&gt;创建 任务&lt;/h4&gt;
&lt;h4&gt;任务取消&lt;/h4&gt;
&lt;h4&gt;任务组¶&lt;/h4&gt;
&lt;h4&gt;休眠¶&lt;/h4&gt;
&lt;h4&gt;并发运行任务¶&lt;/h4&gt;
&lt;h4&gt;主动任务工厂¶&lt;/h4&gt;
&lt;h4&gt;屏蔽取消操作¶&lt;/h4&gt;
&lt;h4&gt;超时&lt;/h4&gt;
&lt;h4&gt;简单等待&lt;/h4&gt;
&lt;h4&gt;在线程中运行¶&lt;/h4&gt;
&lt;h4&gt;跨线程调度¶&lt;/h4&gt;
&lt;h4&gt;内省¶&lt;/h4&gt;
&lt;h4&gt;Task 对象¶&lt;/h4&gt;</content></entry><entry><title>QEMU调试</title><link href="alan717.github.io/qemu.html" rel="alternate"></link><published>2022-01-10T00:00:00+08:00</published><updated>2022-01-10T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2022-01-10:alan717.github.io/qemu.html</id><summary type="html">qemu调试驱动</summary><content type="html">&lt;h2&gt;env&lt;/h2&gt;
&lt;p&gt;仿真一个驱动&lt;/p&gt;
&lt;h2&gt;pre&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;_get_user_1&lt;/code&gt;函数 拷贝一个字符从用户空间。
 &lt;code&gt;remap_pfn_range&lt;/code&gt;
 &lt;code&gt;request_threaded_irq&lt;/code&gt;
 &lt;code&gt;set_bit&lt;/code&gt;&lt;/p&gt;</content></entry><entry><title>一款日本CPU的分析</title><link href="alan717.github.io/cpu00.html" rel="alternate"></link><published>2021-08-11T00:00:00+08:00</published><updated>2021-08-11T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2021-08-11:alan717.github.io/cpu00.html</id><summary type="html">朋友给了一个cpu需要分析一下程序.</summary><content type="html">&lt;h2&gt;env&lt;/h2&gt;
&lt;p&gt;朋友做维修，找我分析一个cpu
&lt;img alt="" src="img/cpu00.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如图型号是：&lt;code&gt;D70F3453GC JAPAN 1218KP421&lt;/code&gt;
通过检索大概判定是nec的一个芯片。&lt;/p&gt;
&lt;h2&gt;分析&lt;/h2&gt;
&lt;p&gt;这个芯片大概看了,是V850E指令集的芯片，日本瑞萨的，分析起来不费什么工作。
主要找到这个cpu的ds手册，但是没有sdk和pg手册，所以正向的分析使用是不可取的了。 
因为芯片里边有rom flash 存储，这使得代码不容易获取（已经攻击另说）
根据手册相同的cpu指令和型号类型能够获取同型号的设备的文档和代码，作为突破口，确保boot code执行的入口没有问题，然后进行初始化其它设备，整个分析的情况下是在黑盒子的情况进行的&lt;/p&gt;
&lt;p&gt;主要就是猜，目的是同型号推断出此型号的设备信息。然后逐步追踪获取self-programming指令，和串口编程，当然有了他的指令集，剩下的编译部分就容易多了，不是什么&lt;/p&gt;
&lt;p&gt;棘手问题，直接推就完事了。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;只是给我分享了照片，还没有空取他哪里拿设备。设备拿来之后再进行分析。手册在这里&lt;a href="misc/UPD70F3451GC-UBT-A.PDF"&gt;link1&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Bruker质谱仪分析</title><link href="alan717.github.io/bruker.html" rel="alternate"></link><published>2021-04-23T00:00:00+08:00</published><updated>2021-04-23T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2021-04-23:alan717.github.io/bruker.html</id><summary type="html">A brief description of bruker device.</summary><content type="html">&lt;h2&gt;env&lt;/h2&gt;
&lt;p&gt;偶然去一个实验室看到这个设备。
设备&lt;code&gt;D8 VENTURE&lt;/code&gt;：&lt;code&gt;SINGLE CRYSTAL X-RAY DIFFRACTION (SC-XRD)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;分析&lt;/h2&gt;
&lt;p&gt;系统使用了rtlinux内核加iram的initrd作为rootfs，和各个模块全部分装成ko形式来访问管理，设备的初始化全部使用rc来管理。
整个系统直接被剪裁成最小化的形式。然后各个文件系统是根据需要然后loop挂在到关键目录然后进行访问。
整个磁盘无法直接看到内核文件，这是不挂在内核到文件系统下， 整个系统盘要进行dd 然后找到偏移定位内核位置。整体通过网口还要进行一次ssh的访问，具体的访问&lt;/p&gt;
&lt;p&gt;要在整机之下进行调试分析。时间有限，暂时没有这么操作，大概看了一下衍射传感器和系统的连接直接fpga高速直连，然后通过pcie直接驱动。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;驱动的设计和通信方式基本通过ko驱动在文件系统中已经摸清楚，因为自己没有这方面的研究所以没在这个上边投入时间了。文件系统我保存了一份。&lt;/p&gt;</content></entry><entry><title>op7p分析一</title><link href="alan717.github.io/Oneplus7p.html" rel="alternate"></link><published>2020-10-05T00:00:00+08:00</published><updated>2020-10-05T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2020-10-05:alan717.github.io/Oneplus7p.html</id><summary type="html">分析oneplus7p 引导.</summary><content type="html">&lt;h3&gt;下载固件&lt;/h3&gt;
&lt;p&gt;根据手机的固件版本信息，在大侠阿木下载站下载固件，解包得到payload.bin，然后dump payload.bin得到bootloader abl.img文件，使用imgtool解包
提取linuxloader文件。&lt;/p&gt;
&lt;h3&gt;分析linuxloader文件&lt;/h3&gt;
&lt;p&gt;根据加载时候出现的调试信息
“/work/home/jenkins/18821_STABLE_R_HYDROGEN_MP/AP/SM8150/android/out/target/product/msmnile/obj/ABL_OBJ/Build/DEBUG_CLANG35/AARCH64/QcomModulePkg/Application/LinuxLoader/LinuxLoader/DEBUG/LinuxLoader.dl”
知道这是高通的linuxloader。&lt;/p&gt;
&lt;h3&gt;下载linuxloader&lt;/h3&gt;
&lt;p&gt;https://git.codelinaro.org/clo/le/abl/tianocore/edk2/-/blob/clo/main/QcomModulePkg/Application/LinuxLoader/LinuxLoader.c
这里得到对应的函数。&lt;/p&gt;</content></entry><entry><title>https过程</title><link href="alan717.github.io/tls1_2.html" rel="alternate"></link><published>2020-10-05T00:00:00+08:00</published><updated>2020-10-05T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2020-10-05:alan717.github.io/tls1_2.html</id><summary type="html">分析https通信及抓包详情</summary><content type="html">&lt;h2&gt;HTTPS 大概过程&lt;/h2&gt;
&lt;p&gt;其中分析具体点看wireshark抓包比较详细的数据结构。
大致过程如下:
1. 客户端发送一个消息中同时包含生成的一个 48 字节的预备主密钥，其中前 2 个字节是 ProtocolVersion，后 46 字节是随机数,
 用 Server 的公钥加密之后通过 Client Key Exchange 子消息发给 Server
2. &lt;/p&gt;</content></entry><entry><title>windows本地监听和转发</title><link href="alan717.github.io/%E6%9C%AC%E5%9C%B0%E7%9B%91%E5%90%AC%E5%92%8C%E8%BD%AC%E5%8F%91.html" rel="alternate"></link><published>2020-09-20T00:00:00+08:00</published><updated>2020-09-20T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2020-09-20:alan717.github.io/%E6%9C%AC%E5%9C%B0%E7%9B%91%E5%90%AC%E5%92%8C%E8%BD%AC%E5%8F%91.html</id><summary type="html">sockets</summary><content type="html">&lt;h2&gt;env:&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Edition Windows 10 Pro
Version 22H2
Installed on    ‎5/‎7/‎2021
OS build    19045.3324
Experience  Windows Feature Experience Pack 1000.19041.1000.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;方法1：本地和监听转发使用powershell&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;powershell.exe -executionpolicy bypass -file .\Script.ps1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;https://raw.githubusercontent.com/deepzec/Win-PortFwd/master/win-portfwd.ps1&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;方法2：使用netsh&lt;/h2&gt;
&lt;h3&gt;开端口,总览,重置&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;netsh interface portproxy show all&lt;/code&gt;&lt;br&gt;
&lt;code&gt;netsh interface portproxy add v4tov4 listenaddress=$Lhost listenport=$Lport connectaddress=$Rhost connectport=$Rport&lt;/code&gt;&lt;br&gt;
&lt;code&gt;netsh interface portproxy reset&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;开防火墙&lt;/h3&gt;
&lt;h4&gt;Old command:&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;netsh firewall add portopening TCP 80 "Open Port 80"&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;New ~~command~~:&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;netsh advfirewall firewall add rule name= "Open Port 80" dir=in action=allow protocol=TCP localport=80&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;两个方法本质都是netsh.&lt;/p&gt;</content></entry><entry><title>Android tcp &amp; https capture 抓包</title><link href="alan717.github.io/capture.html" rel="alternate"></link><published>2020-08-25T00:00:00+08:00</published><updated>2020-08-25T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2020-08-25:alan717.github.io/capture.html</id><summary type="html">tcp capture</summary><content type="html">&lt;h2&gt;env&lt;/h2&gt;
&lt;p&gt;Android 13
tcpdump 
rooted devices.&lt;/p&gt;
&lt;h2&gt;TCP&lt;/h2&gt;
&lt;h3&gt;抓包命令&lt;/h3&gt;
&lt;p&gt;一般手机有tcpdump命令，无需下载
&lt;code&gt;/data/local/tcpdump -i any -p -s 0 -w /sdcard/capture.pcap&lt;/code&gt;  &lt;/p&gt;
&lt;h3&gt;capture.pcap包分析&lt;/h3&gt;
&lt;p&gt;直接拖进wireshark分析.&lt;/p&gt;
&lt;h4&gt;分析细节纪要&lt;/h4&gt;
&lt;p&gt;wireshark 打开对应tcp包的 链路层变成linux cooked capture v1.&lt;/p&gt;
&lt;h5&gt;Linux cooked-mode capture (SLL)&lt;/h5&gt;
&lt;p&gt;为何链路层名称为linux cooked capture？而不是Ethernet Ⅱ
因为包是在linux中使用tcpdump，且指定参数-i any来捕获设备上所有网卡上的包。它会把所有包的以太网头都换成linux cooked capture，wireshark对此解释为虚假的协议。
tcpdump抓包时，如果-i选项指定为一个网卡地址，那么抓取的数据包数据链路层是以太网头部；如果指定any，则以太网头部将被替换为linux cooked capture头部&lt;/p&gt;
&lt;h2&gt;https&lt;/h2&gt;
&lt;p&gt;fiddler 导出证书
&lt;code&gt;openssl x509 -inform DER -in C:\Users\Kian\Desktop\FiddlerRoot.cer -out C:\Users\Kian\Desktop\FiddlerRoot.pem&lt;/code&gt;&lt;br&gt;
&lt;code&gt;openssl x509 -inform PEM -subject_hash -in C:\Users\Kian\Desktop\FiddlerRoot.pem&lt;/code&gt;  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;035f9290
-----BEGIN CERTIFICATE-----
MIIDsjCCApqgAwIBAgIQF05TM2cD64tNXZ9wqO5YuDANBgkqhkiG9w0BAQsFADBn
MSswKQYDVQQLDCJDcmVhdGVkIGJ5IGh0dHA6Ly93d3cuZmlkZGxlcjIuY29tMRUw
EwYDVQQKDAxET19OT1RfVFJVU1QxITAfBgNVBAMMGERPX05PVF9UUlVTVF9GaWRk
bGVyUm9vdDAeFw0yMDExMjQwOTE2MDVaFw0yNDAyMjMwOTE2MDVaMGcxKzApBgNV
BAsMIkNyZWF0ZWQgYnkgaHR0cDovL3d3dy5maWRkbGVyMi5jb20xFTATBgNVBAoM
DERPX05PVF9UUlVTVDEhMB8GA1UEAwwYRE9fTk9UX1RSVVNUX0ZpZGRsZXJSb290
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4k9jH8WVyCzKF/PWL2mN
3228CgqhRBxSuRYUZeOi73d+sRumd3Z2n7uKtUPQTmrWZ34iMLt0fNMn8vliHnnI
F/vc2WDjGBiK2Bwdbe/vlme1MeGSK+VQKiCUQSGWRtG8vN3bRLKkjeWu7UsqZKHv
8MQoXdWUBHgMdSUbCA9RStiaK9oZYlFClWm2lxwLvG2FmkupxQDadBUzYUEdxsfx
VsxglGWpwo+kK3R5ef9dQ68LBzrcImbrClWGYYRQ9hgizJu8uvrmMtTC3eGLhRS0
C8pPpZ47mNE/saEauXyeF8GczfG5lbyJhWP1hXN16AMNJkWTNdGoU4UBmohL6RUw
AQIDAQABo1owWDATBgNVHSUEDDAKBggrBgEFBQcDATASBgNVHRMBAf8ECDAGAQH/
AgEAMB0GA1UdDgQWBBQonuyOhHPvj5K+tL0vA2zVqDp3TDAOBgNVHQ8BAf8EBAMC
AQYwDQYJKoZIhvcNAQELBQADggEBAAEyHBulbUdWIFWuBYOtxQk6Gt9fQ9mI5GF3
jq2qvhK3kBhNveARX2LH20S7BD0KsR++BsDzw0FuHikSqfGtUPiuPN5HPAb8jY2N
GrRdMTnbMEWbmXVHaoXsRTo7YqUjhX/268YDid9UXo6YMGE9S2JkmG+vhGyTUZsd
oUTmgTQ4fzm8WIgfNLxiLsU5H345gwVbLRDAeeavZzneiZWaRDmu3MSLNIkwgFuF
3pDp9nSOncjU9wpkopSOp1X1T10cHWe5M2bNZMBkQGR5b7KmK4QhjhZFtgKJTHh1
KQ3oSWrOun9XpzbCAMfSHzIgC48w/V1+YGR9n5SlY7V73qnMAJU=
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上图输出的 hash 035f9290
因此将 .pem 证书重命名为 e5c3944b.0
手机 magisk 必须要先安装一个模块，如 lsposed
下面步骤可以使用 MT管理器 或者 ADB 命令操作
在手机 /data/adb/modules 目录下随便找一个模块的目录，这里我选 lsposed , 进入此目录
在此目录下创建 system/etc/security/cacerts 目录，将 e5c3944b.0 文件拷贝到新建的这个目录下
最终证书路径为 /data/adb/modules/xxx/system/etc/security/cacerts/e5c3944b.0
重启手机，wifi 界面设置代理 xxx.xxx.xxx.xxx:8888 即可抓包&lt;/p&gt;
&lt;p&gt;Fiddler 方式适合任意抓包软件，只需要将对应证书转换成 xxxxxxxx.0 文件放入 /data/adb/modules/xxx/system/etc/security/cacerts 目录即可&lt;/p&gt;</content></entry><entry><title>Binary Ninja插件开发</title><link href="alan717.github.io/BinNinja.html" rel="alternate"></link><published>2020-08-13T00:00:00+08:00</published><updated>2020-08-13T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2020-08-13:alan717.github.io/BinNinja.html</id><summary type="html">Binary Ninja</summary><content type="html">&lt;h2&gt;plugin调试&lt;/h2&gt;
&lt;p&gt;直接在&lt;code&gt;C:\Users\Kian\AppData\Roaming\Binary Ninja\plugins&lt;/code&gt;中写dd.py然后  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;  &lt;span class="nn"&gt;dd&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;importlib&lt;/span&gt;

&lt;span class="n"&gt;importlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 修改dd.py后每次都要进行这句命令重新加载.&lt;/span&gt;
&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump_mlil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;# 然后调用尝试。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;插件开发时候注意先注释掉&lt;code&gt;register_api&lt;/code&gt;类型的函数.&lt;/p&gt;</content></entry><entry><title>记录英语单词</title><link href="alan717.github.io/danci_en.html" rel="alternate"></link><published>2020-08-13T00:00:00+08:00</published><updated>2020-08-13T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2020-08-13:alan717.github.io/danci_en.html</id><summary type="html">英语单词本</summary><content type="html">&lt;h2&gt;pre&lt;/h2&gt;
&lt;p&gt;记录收集的单词本：目标3000个.&lt;/p&gt;
&lt;h2&gt;list&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;period：句号&lt;/li&gt;
&lt;li&gt;comma：逗号&lt;/li&gt;
&lt;li&gt;colon 冒号：&lt;/li&gt;
&lt;li&gt;semicolon： 分号：&lt;/li&gt;
&lt;li&gt;prime：上撇号，如数学分析中的一阶导数 f′(x)&lt;/li&gt;
&lt;li&gt;underscore：下划线；&lt;/li&gt;
&lt;li&gt;省略号：ellipsis；&lt;/li&gt;
&lt;li&gt;exclamation mark：感叹号；&lt;/li&gt;
&lt;li&gt;dash：横线；Hyphen：连字符；&lt;/li&gt;
&lt;li&gt;Quotation Marks：双引号，用于引用；&lt;/li&gt;
&lt;li&gt;apostrophe：上撇，&lt;/li&gt;
&lt;li&gt;slash：斜线；&lt;/li&gt;
&lt;li&gt;
&lt;h1&gt;：number sign；&lt;/h1&gt;
&lt;/li&gt;
&lt;li&gt;^：caret，脱字符号，^，中文尚无通用名称，可以是乘方、插入符号、插入符、脱字符号等；英文称为caret (英语发音：/ˈkærət/)，是个倒 V 形的字素；&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>gdb调试</title><link href="alan717.github.io/gdb.html" rel="alternate"></link><published>2020-08-13T00:00:00+08:00</published><updated>2020-08-13T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2020-08-13:alan717.github.io/gdb.html</id><summary type="html">gdb</summary><content type="html">&lt;h2&gt;env&lt;/h2&gt;
&lt;p&gt;android、linux&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不涉及基础命令，基础命令请直接看document.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;核心原理&lt;/h2&gt;
&lt;p&gt;ptrace信号接口.使用ptrace接口和trap信号配合使用.具体实现直接看代码.&lt;/p&gt;
&lt;h2&gt;分析框架&lt;/h2&gt;
&lt;p&gt;主要看gdbserve之间的通信协议。ida 是支持gdb协议的，gdbserver的通信协议很简单主要是明文十六进制传输，在这种情况下，配合qiling和unicorn框架
在load gdbserver二进制之后处理程序逻辑有很大的便利和方便，直接整机的dump，然后进行仿真执行，直接能看到具体的问题点，这些问题点需要想象和经验来判断&lt;br&gt;
判断完成之后进行仿真和bypass操作即可完成处理。&lt;/p&gt;
&lt;h2&gt;调试办法&lt;/h2&gt;
&lt;h3&gt;dump调试&lt;/h3&gt;
&lt;p&gt;直接整进程dump 直接qemu或者是qiling仿真，直接gdb  &lt;code&gt;-s -S&lt;/code&gt;调试。识别到关键的函数和数据会很快解决问题。&lt;/p&gt;
&lt;h3&gt;暂停stop specially process&lt;/h3&gt;
&lt;p&gt;直接发信号暂停整个进程，然后回溯处理。&lt;/p&gt;
&lt;h3&gt;特殊数据处理&lt;/h3&gt;
&lt;p&gt;这种情况属于开发阶段的处理情况，直接查看文档就可以解决。&lt;/p&gt;</content></entry><entry><title>使用dll生成对应的lib文件</title><link href="alan717.github.io/%E4%BD%BF%E7%94%A8dll%E7%94%9F%E6%88%90%E5%AF%B9%E5%BA%94lib%E6%96%87%E4%BB%B6.html" rel="alternate"></link><published>2020-07-03T00:00:00+08:00</published><updated>2020-07-03T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2020-07-03:alan717.github.io/%E4%BD%BF%E7%94%A8dll%E7%94%9F%E6%88%90%E5%AF%B9%E5%BA%94lib%E6%96%87%E4%BB%B6.html</id><summary type="html">使用dll生成对应的lib文件</summary><content type="html">&lt;h1&gt;使用dll生成对应的lib文件&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候没有lib文件，只有头文件，怎么生成lib文件呢~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;导出信息&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dumpbin /exports C:\yourpath\yourlib.dll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出如:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;ordinal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;RVA&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00001080&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_close&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00001120&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_disasm&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00001590&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_disasm_ex&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;000015&lt;/span&gt;&lt;span class="n"&gt;A0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_disasm_iter&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00001790&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_errno&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;000017&lt;/span&gt;&lt;span class="n"&gt;A0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_free&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;000017F&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_group_name&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;8&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00001810&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_insn_group&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="mh"&gt;9&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00001850&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_insn_name&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="mh"&gt;9&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00001870&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_malloc&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;11&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;000018F&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_op_count&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;12&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00001&lt;/span&gt;&lt;span class="n"&gt;C00&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_op_index&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;13&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00002050&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_open&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;14&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;000021&lt;/span&gt;&lt;span class="n"&gt;A0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_option&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;15&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;000024&lt;/span&gt;&lt;span class="n"&gt;C0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_reg_name&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;16&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;000024E0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_reg_read&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;17&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00002520&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_reg_write&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;18&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;11&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00002560&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_regs_access&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;19&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;12&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00002620&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_strerror&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;20&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;13&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00002700&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_support&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="mh"&gt;21&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="mh"&gt;14&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;00002730&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cs_version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后复制name
保存一个文件叫&lt;code&gt;lib_name.def&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;EXPORTS
cs_close
cs_disasm
cs_disasm_ex
cs_disasm_iter
cs_errno
cs_free
cs_group_name
cs_insn_group
cs_insn_name
cs_malloc
cs_op_count
cs_op_index
cs_open
cs_option
cs_reg_name
cs_reg_read
cs_reg_write
cs_regs_access
cs_strerror
cs_support
cs_version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后使用lib.exe&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;lib.exe  /DEF:C:\Users\Kian\Desktop\capstone.def /OUT:C:\Users\Kian\Desktop\capstone.lib
生成对应的lib文件。
&lt;/p&gt;
&lt;/blockquote&gt;</content></entry><entry><title>Lua-5.1 long string comments分析四</title><link href="alan717.github.io/lua51-longSC.html" rel="alternate"></link><published>2019-09-26T00:00:00+08:00</published><updated>2019-09-26T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-09-26:alan717.github.io/lua51-longSC.html</id><summary type="html">注释和长字符。</summary><content type="html"></content></entry><entry><title>Lua-5.1 varargs分析三</title><link href="alan717.github.io/lua51-varargs.html" rel="alternate"></link><published>2019-09-20T00:00:00+08:00</published><updated>2019-09-20T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-09-20:alan717.github.io/lua51-varargs.html</id><summary type="html">varargs特性.</summary><content type="html"></content></entry><entry><title>kernel-mm内存三部曲-2</title><link href="alan717.github.io/krnl-mm2.html" rel="alternate"></link><published>2019-09-13T00:00:00+08:00</published><updated>2019-09-13T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-09-13:alan717.github.io/krnl-mm2.html</id><summary type="html">krnl-2</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;read the fuck code!
A picture is worth a thousand words.&lt;/p&gt;
&lt;/blockquote&gt;</content></entry><entry><title>Lua-5.1 gc分析二</title><link href="alan717.github.io/lua51-gc.html" rel="alternate"></link><published>2019-09-10T00:00:00+08:00</published><updated>2019-09-10T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-09-10:alan717.github.io/lua51-gc.html</id><summary type="html">garbase collect.</summary><content type="html"></content></entry><entry><title>Lua-5.1 coroutine分析二</title><link href="alan717.github.io/lua51-coroutine.html" rel="alternate"></link><published>2019-08-26T00:00:00+08:00</published><updated>2019-08-26T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-08-26:alan717.github.io/lua51-coroutine.html</id><summary type="html">初步编译器分析</summary><content type="html">&lt;h2&gt;coroutine&lt;/h2&gt;</content></entry><entry><title>kernel-mm映射三部曲-1</title><link href="alan717.github.io/krnl_mm.html" rel="alternate"></link><published>2019-08-13T00:00:00+08:00</published><updated>2019-08-13T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-08-13:alan717.github.io/krnl_mm.html</id><summary type="html">页表-1</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;read the fuck code!&lt;br&gt;
A picture is worth a thousand words.&lt;/p&gt;
&lt;p&gt;现在使用的机器是linux3.0.35,arm 32bit需要处理一下内存,一次就处理完&lt;br&gt;
本文只记录实际的应用，不做科普普及，如需要详尽书面知识请查阅相关wiki.&lt;br&gt;
不关心整体，因为整体不在本次关注点内  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;虚拟地址和物理地址&lt;/h2&gt;
&lt;p&gt;下边的代码中v6是虚拟地址加上0x90000000, 在内核中找到对应代码.
对应的代码为 &lt;code&gt;__pa(virtual_address)&amp;gt;&amp;gt;PAGE_SHIFT&lt;/code&gt;.可知v6为physical address.
从而得出物理地址得出是虚拟地址加0x90000000.&lt;br&gt;
&lt;code&gt;#define PFN_PHYS(x)    ((phys_addr_t)(x) &amp;lt;&amp;lt; PAGE_SHIFT)&lt;/code&gt;
为页框转为物理地址.&lt;/p&gt;
&lt;p&gt;反向则为物理地址转页框PFN.&lt;code&gt;&amp;gt;&amp;gt;12&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set_bit(10, mem_map + 32 * ((v6 &amp;gt;&amp;gt; 12) - 0x10000))&lt;/code&gt;
其中mem_map是内核的导出符号，从导入表可以看到。mem_map其实保存了 page信息。
其次&lt;code&gt;mem_map + 32 * ((v6 &amp;gt;&amp;gt; 12) - 0x10000)&lt;/code&gt;对应的函数宏为 v6为&lt;code&gt;__pa&lt;/code&gt;得到的物理地址，然后&lt;code&gt;&amp;gt;&amp;gt;PAGE_SHIFT&lt;/code&gt;
为得到的页框pfn,然后&lt;code&gt;pfn-0x10000&amp;lt;&amp;lt;5&lt;/code&gt;得到的是page页虚拟地址. 这个计算过程对应的宏是&lt;code&gt;pfn_to_page&lt;/code&gt;
然后验证一下：&lt;/p&gt;
&lt;p&gt;先看page数据结构：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt; * Common helper functions.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="nx"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;__get_free_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gfp_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;gfp_mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;     * __get_free_pages() returns a 32-bit address, which cannot represent&lt;/span&gt;
&lt;span class="cm"&gt;     * a highmem page&lt;/span&gt;
&lt;span class="cm"&gt;     */&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;VM_BUG_ON&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;gfp_mask&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;__GFP_HIGHMEM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;alloc_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gfp_mask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;直接分page 然后page_address:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HASHED_PAGE_VIRTUAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WANT_PAGE_VIRTUAL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lowmem_page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;set_page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;page_address_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;lowmem_page_address:  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;linux/vmstat.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__always_inline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lowmem_page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__va&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PFN_PHYS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_to_pfn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;page_to_pfn：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;#&lt;/span&gt;define page_to_pfn __page_to_pfn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;__page_to_pfn：
因为内核分为三种内存模型，要确定是哪一种内存模型：&lt;br&gt;
* CONFIG_FLATMEM 平坦内存
* CONFIG_DISCONTIGMEM   不连续内存
* CONFIG_SPARSEMEM    稀疏内存 支持热插拔
是arm设备，所以是flatmem了，不用看config文件了。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;/*&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;supports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*/&lt;/span&gt;
#&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONFIG_FLATMEM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

#&lt;span class="n"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__pfn_to_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mem_map&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ARCH_PFN_OFFSET&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
#&lt;span class="n"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__page_to_pfn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)((&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mem_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="n"&gt;ARCH_PFN_OFFSET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
#&lt;span class="n"&gt;elif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CONFIG_DISCONTIGMEM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过上边得代码可推定ARCH_PFN_OFFSET为0x10000.
验证：
&lt;code&gt;#define ARCH_PFN_OFFSET        PHYS_PFN_OFFSET&lt;/code&gt;
&lt;code&gt;#define PHYS_PFN_OFFSET    (PHYS_OFFSET &amp;gt;&amp;gt; PAGE_SHIFT)&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#ifndef PHYS_OFFSET&lt;/span&gt;
&lt;span class="cp"&gt;#define PHYS_OFFSET         UL(CONFIG_DRAM_BASE)&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;推定上边得代码是 推page&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;linux/init.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;linux/kernel.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;linux/module.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;linux/mm_types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;linux/mm.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;linux/gfp.h&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;//内核模块初始化函数&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__init&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;lkm_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alloc_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GFP_KERNEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;virt_address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;page_address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;virtual addr = 0x%lx&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;virt_address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page_to_pfn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pfn = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phys_address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PFN_PHYS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;phys addr = 0x%lx&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;phys_address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;virt_address1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;__va&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phys_address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;virtual addr1 = 0x%lx&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;virt_address1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;free_pages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virt_address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//内核模块退出函数&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;__exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;lkm_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Goodbye&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;module_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lkm_init&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;module_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lkm_exit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;MODULE_LICENSE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GPL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;用户层的页表映射&lt;/h2&gt;
&lt;h3&gt;pagemap页映射：&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;/proc/pid/pagemap&lt;/code&gt;
该文件允许用户空间程序找出每个虚拟页映射到物理帧(内核书中描写为页框)。每个虚拟页面对应一个64位的值。包含以下数据（fs/proc/task_mmu.c，pagemap_read方法读取）
* Bits 0-54 page frame number (PFN) if present&lt;br&gt;
&lt;em&gt; Bits 0-4 swap type if swapped&lt;br&gt;
&lt;/em&gt; Bits 5-54 swap offset if swapped&lt;br&gt;
&lt;em&gt; Bit 55 pte is soft-dirty (see Documentation/admin-guide/mm/soft-dirty.rst)&lt;br&gt;
&lt;/em&gt; Bit 56 page exclusively mapped (since 4.2)&lt;br&gt;
&lt;em&gt; Bits 57-60 zero&lt;br&gt;
&lt;/em&gt; Bit 61 page is file-page or shared-anon (since 3.5)&lt;br&gt;
&lt;em&gt; Bit 62 page swapped&lt;br&gt;
&lt;/em&gt; Bit 63 page present  &lt;/p&gt;
&lt;p&gt;其中&lt;br&gt;
&lt;code&gt;使用/proc/pid/maps可以高效的确定映射的内存区域、跳过未映射的区域。&lt;/code&gt;&lt;br&gt;
&lt;code&gt;/proc/kpagecount：这个文件包含64位计数 ， 表示每一页被映射的次数，按照PFN值固定索引。&lt;/code&gt;&lt;br&gt;
&lt;code&gt;/proc/kpageflags：此文件包含为64位的标志集 ，表示该页的属性，按照PFN索引。&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;使用下边测试程序来读页指针：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Read /proc/$PID/pagemap&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_pagemap_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;maps_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/proc/{0}/pagemap&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maps_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Process {0} doesn&amp;#39;t exist.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

  &lt;span class="n"&gt;page_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sysconf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SC_PAGE_SIZE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;pagemap_entry_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
  &lt;span class="n"&gt;offset&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;page_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pagemap_entry_size&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;read_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maps_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_pfn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x7FFFFFFFFFFFFF&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_file_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;##########################################################&lt;/span&gt;

&lt;span class="c1"&gt;# Read /proc/kpagecount&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_pagecount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/proc/kpagecount&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pfn&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;read_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;##########################################################&lt;/span&gt;

&lt;span class="c1"&gt;# Read /proc/kpageflags&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_page_flags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/proc/kpageflags&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pfn&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;read_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;long&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;long&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_pagemap_entry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;pfn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_pfn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PFN: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Is Present? : {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Is file-page: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_file_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Page count: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_pagecount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Page flags: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_page_flags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pfn&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;线性地址转换（MMU）4-levle页表&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;4级页表存在19年以前的发行版中，新的发行版已经是默认支持5级页表了。5级页表支持64TB以上的ram内存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;地址是直接传递给MMU而非物理地址&lt;/li&gt;
&lt;li&gt;64-bit linear address is split into some parts. Only low 48 bits are significant, it means that &lt;code&gt;2^48&lt;/code&gt; or &lt;code&gt;256&lt;/code&gt; TBytes of linear-address space may be accessed at any given time.&lt;/li&gt;
&lt;li&gt;cr3 register stores the address of the 4 top-level paging structure.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;47:39&lt;/code&gt; bits of the given linear address store an index into the paging structure level-4, &lt;code&gt;38:30&lt;/code&gt; bits store index into the paging structure level-3, &lt;code&gt;29:21&lt;/code&gt; bits store an index into the paging structure level-2, &lt;code&gt;20:12&lt;/code&gt; bits store an index into the paging structure level-1 and 11:0 bits provide the offset into the physical page in byte.
&lt;img alt="" src="img/4_level_paging.png"&gt;&lt;blockquote&gt;
&lt;p&gt;如图：
分别为page global dir -&amp;gt; page upper dir -&amp;gt;page mid dir -&amp;gt;page table-&amp;gt; offset
PGD-&amp;gt;PUD-&amp;gt;PMD-&amp;gt;PTE
Every access to a linear address is either a supervisor-mode access or a user-mode access. This access is determined by the CPL (current privilege level). If CPL &amp;lt; 3 it is a supervisor mode access level, otherwise it is a user mode access level. For example, the top level page table entry contains access bits and has the following structure (See arch/x86/include/asm/pgtable_types.h for the bit offset definitions):&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;63  62                  52 51                                                    32
 --------------------------------------------------------------------------------
| N |                     |                                                     |
|   |     Available       |     Address of the paging structure on lower level  |
| X |                     |                                                     |
 --------------------------------------------------------------------------------
31                                              12 11  9 8 7 6 5   4   3 2 1     0
 --------------------------------------------------------------------------------
|                                                |     | M |I| | P | P |U|W|    |
| Address of the paging structure on lower level | AVL | B |G|A| C | W | | |  P |
|                                                |     | Z |N| | D | T |S|R|    |
 --------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;63 bit - N/X bit (No Execute Bit) which presents ability to execute the code from physical pages mapped by the table entry;&lt;/li&gt;
&lt;li&gt;62:52 bits - ignored by CPU, used by system software;&lt;/li&gt;
&lt;li&gt;51:12 bits - stores physical address of the lower level paging structure;&lt;/li&gt;
&lt;li&gt;11: 9 bits - ignored by CPU;&lt;/li&gt;
&lt;li&gt;MBZ - must be zero bits;&lt;/li&gt;
&lt;li&gt;Ignored bits;&lt;/li&gt;
&lt;li&gt;A - accessed bit indicates was physical page or page structure accessed;&lt;/li&gt;
&lt;li&gt;PWT and PCD used for cache;&lt;/li&gt;
&lt;li&gt;U/S - user/supervisor bit controls user access to all the physical pages mapped by this table entry;&lt;/li&gt;
&lt;li&gt;R/W - read/write bit controls read/write access to all the physical pages mapped by this table entry;&lt;/li&gt;
&lt;li&gt;P - present bit. Current bit indicates was page table or physical page loaded into primary memory or not.
Ok, we know about the paging structures and their entries. Now let&amp;rsquo;s see some details about 4-level paging in the Linux kernel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关闭内核5级页表使用&lt;code&gt;no5lvl&lt;/code&gt;或者检查是否开启5级页表用&lt;code&gt;lscpu | grep -i la57&lt;/code&gt;
还有就是&lt;code&gt;CONFIG_X86_5LEVEL&lt;/code&gt;配置可以直接看到 
5级页表本质上在PUD的前一级加了一个P4D,然后在位数上从48位拓冲到57位。&lt;/p&gt;
&lt;h2&gt;Translation Lookaside Buffer (TLB)&lt;/h2&gt;
&lt;p&gt;TLB中保存的是线性地址和对应的物理地址
一般分为指令缓存和数据缓存。修改CR3寄存器可使得TLB刷新。&lt;/p&gt;
&lt;h2&gt;windows系统的内存分页&lt;/h2&gt;
&lt;p&gt;32位系统下的xp系统分no-pxe 和pxe 分别分页是10-10-12分页和2-9-9-12分页.
差别就是一个是32位，一个是36位，多了4位的寻址。能支持64GB寻址。&lt;/p&gt;</content></entry><entry><title>Lua-5.1 编译分析一</title><link href="alan717.github.io/lua51.html" rel="alternate"></link><published>2019-08-13T00:00:00+08:00</published><updated>2019-08-13T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-08-13:alan717.github.io/lua51.html</id><summary type="html">初步编译器分析</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;分析lua的很多了，这里记录一下我的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;词法分析&lt;/h2&gt;
&lt;p&gt;lua-5.1词法分析在llex.c中，为了表达状态机lua实现了lexstate来存储使用的数据其中Mbuffer类型的buff每次会情况重置，然后从zio中再读一个字节
赋给current， next()会读一个字符，如图：
&lt;img alt="Image" src="./pic/lua-5.1.1.png"&gt;&lt;br&gt;
前端将文件token化读入，token化
&lt;img alt="Image" src="./pic/lua-5.1.2.png"&gt;&lt;br&gt;
解析变量名luaX_newstring转换成一个tstring存进语义seminfo中，然后返回当前为token_name类型。&lt;/p&gt;
&lt;h3&gt;zio&lt;/h3&gt;
&lt;p&gt;其中zio读取文件到内存中处理,省去频繁文件i/o读增加效率.&lt;/p&gt;
&lt;h3&gt;lookahead&lt;/h3&gt;
&lt;h2&gt;字节码转换指令生成&lt;/h2&gt;
&lt;p&gt;例如：
&lt;code&gt;helloworld.lua&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-- the first program in every language

io.write(&amp;quot;Hello world, from &amp;quot;,_VERSION,&amp;quot;!\n&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;首先读的- 然后判断第二个token是不是‘-’如果是则为注释。
然后根据chunk处理&lt;br&gt;
&lt;code&gt;/* chunk -&amp;gt; { stat [`;'] } */&lt;/code&gt;&lt;br&gt;
然后展开为stat：  &lt;br&gt;
&lt;code&gt;/* stat -&amp;gt; func | assignment */&lt;/code&gt;&lt;br&gt;
自上而下展开，主表达式primaryexp：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt; /* primaryexp -&amp;gt;
        prefixexp { `.&amp;#39; NAME | `[&amp;#39; exp `]&amp;#39; | `:&amp;#39; NAME funcargs | funcargs } */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后根据 . token展开：field 展开-》luaK_dischargevars
来判断变量类型：展开成lua5.1字节码存储起来成表达式信息。
如图：
&lt;img alt="Image" src="./pic/lua-5.1.3.png"&gt;&lt;br&gt;
然后读io 为token_name类型，则认为时global变VGLOBAL，
&lt;img alt="Image" src="./pic/4.png"&gt;&lt;br&gt;
然后展开.write函数.
再到primaryexp函数解析函数（）调用:
&lt;img alt="Image" src="./pic/5.png"&gt;&lt;br&gt;
生成调用函数的call 寄存器保存指令，然后 保存函数参数到hash表，然后保存栈，然后括号匹配.
完成后下一行语句。
&lt;img alt="Image" src="./pic/6.png"&gt;&lt;br&gt;
整体自上而下展开。&lt;/p&gt;
&lt;h2&gt;后端执行&lt;/h2&gt;
&lt;p&gt;后端执行在执行在vm中执行，在&lt;code&gt;\src\lvm.c&lt;/code&gt;是vm代码。luaV_execute执行指令。这里执行的指令已经是翻译好的字节码了。&lt;/p&gt;
&lt;h2&gt;ZJ&lt;/h2&gt;
&lt;p&gt;没有过多的剖析代码的细节，只分析总体大纲，在基础上有清楚认识之后开始单独分析。下面二、三将分析具体的实现细节。&lt;/p&gt;</content></entry><entry><title>App注入1</title><link href="alan717.github.io/appzhuru1.html" rel="alternate"></link><published>2019-04-25T00:00:00+08:00</published><updated>2019-04-25T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-04-25:alan717.github.io/appzhuru1.html</id><summary type="html">注入app</summary><content type="html">&lt;h2&gt;pre&lt;/h2&gt;
&lt;p&gt;app一直检测我的package list.烦人，我注入你。&lt;/p&gt;
&lt;h2&gt;frida+lief&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;pip install lief &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;python：  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lief&lt;/span&gt;

&lt;span class="n"&gt;libnative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lief&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;libsafeguard.so&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;libnative&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;libdd.so&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Injection!&lt;/span&gt;
&lt;span class="n"&gt;libnative&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;libsafeguard.so.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;下载：libgadget&lt;/p&gt;
&lt;p&gt;具体实现看frida代码：&lt;code&gt;lib/gadget/gadget.vala&lt;/code&gt;
然后将so上传到手机，配置文件写&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;interaction&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/sdcard/dd.js&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;setImmediate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;Java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;targetClass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;com.amap.api.location.AMapLocation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;methodName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;getLongitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gclass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targetClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gclass&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;methodName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;overload&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;GDA[Hook getLongitude()]&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;methodName&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;return &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;108&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;11108.856&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;setImmediate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;Java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;targetClass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;com.amap.api.location.AMapLocation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;methodName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;getLatitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gclass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targetClass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;gclass&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;methodName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;overload&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;GDA[Hook getLatitude()]&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;methodName&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;return &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1234.160&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;900&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;libdd.config.so 文件配置和so同配置.&lt;/p&gt;</content></entry><entry><title>Base64算法分析</title><link href="alan717.github.io/base64%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93.html" rel="alternate"></link><published>2019-04-23T00:00:00+08:00</published><updated>2019-04-23T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-04-23:alan717.github.io/base64%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93.html</id><summary type="html">A brief description of base64 algorithm.</summary><content type="html">&lt;h1&gt;base64&lt;/h1&gt;
&lt;h2&gt;数学分析&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;wiki描述: Base64（基底64）是一种基于64个可打印字符来表示二进制数据的表示方法
用64个符号表示二进制，求一下表示64个字符需要多少位用log2(64)=6,需要六位，而二进制一个字节8位，最大公约数
为24为三个字节，表示为4个字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;算法如下：&lt;/p&gt;</content></entry><entry><title>aboot分析一</title><link href="alan717.github.io/aboot.html" rel="alternate"></link><published>2019-03-05T00:00:00+08:00</published><updated>2019-03-05T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-03-05:alan717.github.io/aboot.html</id><summary type="html">分析nexus5的android boot.</summary><content type="html">&lt;h3&gt;前提&lt;/h3&gt;
&lt;p&gt;手里有一个nexus5手机，想分析研究一下。&lt;/p&gt;
&lt;h3&gt;实践&lt;/h3&gt;
&lt;h4&gt;准备&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;nexus5手机&lt;/li&gt;
&lt;li&gt;电脑&lt;/li&gt;
&lt;li&gt;系统版本:mra58k&lt;/li&gt;
&lt;li&gt;软件：ida free,010editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;load bin.&lt;/h4&gt;
&lt;p&gt;aboot来自于手机包中,用imjtool提取bootloader-hammerhead-hhz12k.img文件,得到单独的aboot文件。这个文件并不是直接来自于存储芯片，而是需要fastboot工具刷写，自然而然这个文件是有文件头的，
文件头格式的定位需要逆向分析来实现，首先确定的是arm芯片的exception vector 一般追踪这个向量表则不难定位到文件的code segment，exception vector
有个特征是 b 0x123456,其中b指令就是0xEA,这个指令后边的立即数就是距离当前指令的偏移;还有一种方式就是直接在源代码中查找,这个源代码不用最新版也可以确定一些特征,aboot用的就是LK。
&lt;img alt="Image" src="./pic/2.png"&gt;
&lt;img alt="Image" src="./pic/1.png"&gt;&lt;/p&gt;
&lt;p&gt;除此之外要让逆向工具识别二进制，需要知道二进制的load base address. 在arm下一些指令如ldr是hard code读绝对地址字符串，根据这个特征就可以知道
load base address是多少了。一般会拿到头部的两个字节，然后根据头部的两个字节去在文件头中找到对应的数据结构。
当然这要保证拿到的文件是raw data,而非加密的文件。&lt;/p&gt;
&lt;h4&gt;除此之外&lt;/h4&gt;
&lt;p&gt;除此之外还有证书的部分，这部分的数据，一般在文件头前边或者文件的末尾，这个根据LK的源码或者是分析aboot中的逻辑可以判断出来位置和大小，然后在文件头中找到对应。
本章完.&lt;/p&gt;
&lt;h4&gt;参考&lt;/h4&gt;
&lt;p&gt;[1].http://www.newandroidbook.com/Articles/aboot.html&lt;/p&gt;</content></entry><entry><title>My First Document</title><link href="alan717.github.io/Hello_Blog.html" rel="alternate"></link><published>2019-01-23T00:00:00+08:00</published><updated>2019-01-23T00:00:00+08:00</updated><author><name>LK.</name></author><id>tag:None,2019-01-23:alan717.github.io/Hello_Blog.html</id><summary type="html">A brief description of my first document.</summary><content type="html">&lt;h2&gt;topic&lt;/h2&gt;
&lt;p&gt;尝试使用markdown来写一些blog，把原本网站的内容迁移过来。然后在这里记录一下，制作blog时遇到的问题。
谢谢&lt;/p&gt;
&lt;h2&gt;网页生成&lt;/h2&gt;
&lt;p&gt;网页根据templates中的base.html模板进行填充,文章|内容填充在&lt;main&gt;标签之内,具体的网页头都在这个之中。&lt;/p&gt;
&lt;h2&gt;css&lt;/h2&gt;
&lt;h3&gt;display:flex,block区别&lt;/h3&gt;
&lt;h3&gt;padding&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ex:
     padding: 0rem 0.2rem;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第一个参数为上下,第二个为左右.&lt;/p&gt;
&lt;h3&gt;@media&lt;/h3&gt;
&lt;p&gt;判断设备参数.&lt;/p&gt;
&lt;h3&gt;em&lt;/h3&gt;
&lt;p&gt;em：相對單位，每個子元素透過「倍數」乘以父元素的 px 值。&lt;/p&gt;</content></entry></feed>